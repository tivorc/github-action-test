name: Test

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

env:
  DOTNET_VERSION: '8.0.101'
  WEBAPP_URL: localhost:6900

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Start MSSQL Container and setup database
        run: |
          docker compose up -d

      - name: Wait for MSSQL to be ready
        run: |
          set +e
          output=$(docker exec database /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P P@ssw0rd -i /test/test.sql 2>&1)
          is_up=$?
          while [ $is_up -ne 0 ] || [[ ! $output =~ "hay 56 registros" ]] ; do
            output=$(docker exec database /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P P@ssw0rd -i /test/test.sql 2>&1)
            is_up=$?
            echo "$is_up: $output"
            sleep 5 
          done
          set -e

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build and run WebApp
        run: |
          dotnet publish --configuration Release --output ./output SchoolAPI/SchoolAPI.csproj
          dotnet ./output/SchoolAPI.dll &
        env:
          ASPNETCORE_ENVIRONMENT: Development
          ASPNETCORE_URLS: http://${{ env.WEBAPP_URL }}

      - name: Wait for WebApp to be ready
        run: |
          set +e
          output=$(curl -s -H "Content-Type: application/json" -d '{"query":"{ ping }"}' http://${{ env.WEBAPP_URL }}/graphql 2>&1)
          is_up=$?
          echo $output
          while [[ ! $output =~ "pong" ]] ; do
            output=$(curl -s -H "Content-Type: application/json" -d '{"query":"{ ping }"}' http://${{ env.WEBAPP_URL }}/graphql 2>&1)
            is_up=$?
            echo "$is_up: $output"
            sleep 5
          done
          set -e

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Run websocket tests
        run: |
          cd SchoolAPI.Test.WS
          npm install
          npm run test
        env:
          WEBAPP_URL: ${{ env.WEBAPP_URL }}
